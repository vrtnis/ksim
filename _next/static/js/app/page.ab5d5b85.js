(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[931],{8562:function(e,n,i){Promise.resolve().then(i.bind(i,8212))},8212:function(e,n,i){"use strict";i.r(n);var l=i(7437),s=i(2265),a=i(1326),t=i(511),r=i(7625),c=i(2786),o=i(4990),d=i(1733),h=i(354),x=i(7183);function m(e){let{children:n,value:i,index:s,...r}=e;return(0,l.jsx)("div",{role:"tabpanel",hidden:i!==s,id:"simple-tabpanel-".concat(s),"aria-labelledby":"simple-tab-".concat(s),...r,children:i===s&&(0,l.jsx)(a.Z,{sx:{p:3},children:(0,l.jsx)(t.Z,{children:n})})})}let j=[{label:"Home",content:(0,l.jsx)(()=>(0,l.jsx)("div",{children:(0,l.jsx)("p",{children:"Welcome to the K-Scale Sim homepage."})}),{})},{label:"Installation",content:(0,l.jsx)(()=>(0,l.jsxs)("div",{children:[(0,l.jsx)("h2",{children:"Installation"}),(0,l.jsx)("p",{children:"Clone this repository:"}),(0,l.jsx)("pre",{children:(0,l.jsx)("code",{children:"git clone https://github.com/kscalelabs/ksim.git\ncd ksim"})}),(0,l.jsx)("p",{children:"It is recommended that you use a virtual environment to install the dependencies for this project. You can create a new conda environment using the following command:"}),(0,l.jsx)("pre",{children:(0,l.jsx)("code",{children:"conda create --name ksim python=3.11\nconda activate ksim"})}),(0,l.jsx)("p",{children:"To install the dependencies, run the following command:"}),(0,l.jsx)("pre",{children:(0,l.jsx)("code",{children:"make install-dev"})}),(0,l.jsx)("p",{children:"Finally, add your Weights & Biases API key via conda:"}),(0,l.jsx)("pre",{children:(0,l.jsx)("code",{children:"conda env config vars set WANDB_API_KEY=<your api key>"})})]}),{})},{label:"MJX Gym Usage",content:(0,l.jsx)(()=>(0,l.jsxs)("div",{children:[(0,l.jsx)("h2",{children:"MJX Gym Usage"}),(0,l.jsx)("p",{children:"MJX Gym is a library for training and evaluating reinforcement learning agents in MJX environments..."}),(0,l.jsx)("p",{children:"To train the default humanoid environment, first navigate to the /mjx_gym directory:"}),(0,l.jsx)("pre",{children:(0,l.jsx)("code",{children:"cd ksim/mjx_gym\npython train.py --config experiments/default_humanoid_walk.yaml"})}),(0,l.jsx)("p",{children:"Example training curves are shown below:"})]}),{})},{label:"Training",content:(0,l.jsx)(()=>(0,l.jsxs)("div",{children:[(0,l.jsx)("h2",{children:"Training"}),(0,l.jsx)("p",{children:"For quick experimentation, you may specify all relevant training configurations via YAML files..."})]}),{})},{label:"Testing and Rendering",content:(0,l.jsx)(()=>(0,l.jsxs)("div",{children:[(0,l.jsx)("h2",{children:"Testing and Rendering"}),(0,l.jsx)("p",{children:"We provide an easy way to test and render the trained model using the play.py script..."}),(0,l.jsx)("pre",{children:(0,l.jsx)("code",{children:"python play.py --config experiments/default_humanoid_walk.yaml\npython play.py --config experiments/default_humanoid_walk.yaml --use_mujoco"})})]}),{})},{label:"SLURM Cluster",content:(0,l.jsx)(()=>(0,l.jsxs)("div",{children:[(0,l.jsx)("h2",{children:"Running from SLURM Cluster"}),(0,l.jsx)("p",{children:"To run from a SLURM cluster, cd to /mjx_gym/ and run:"}),(0,l.jsx)("pre",{children:(0,l.jsx)("code",{children:"sbatch scripts/train.slurm"})})]}),{})},{label:"Common Issues",content:(0,l.jsx)(()=>(0,l.jsxs)("div",{children:[(0,l.jsx)("h2",{children:"Common Issues"}),(0,l.jsx)("p",{children:"You might see the following error when running train.py:"}),(0,l.jsx)("pre",{children:(0,l.jsx)("code",{children:'An NVIDIA GPU may be present on this machine, but a CUDA-enabled jaxlib is not installed. Falling back to cpu.\n\nOne way to fix this issue is to uninstall jax and jaxlib and reinstall them with your specific CUDA version:\npip uninstall jax jaxlib\npip install --upgrade "jax[cuda12]" -f https://storage.googleapis.com/jax-releases/jax_cuda_releases.html'})})]}),{})},{label:"MJCF Reference",content:(0,l.jsx)(()=>(0,l.jsxs)("div",{children:[(0,l.jsx)("h2",{children:"MJCF Reference"}),(0,l.jsx)("p",{children:"To visualize any MJCF file, you can run the following command:"}),(0,l.jsx)("pre",{children:(0,l.jsx)("code",{children:"python3 -m mujoco.viewer --mjcf <path-to-mjcf-file>"})})]}),{})}];n.default=()=>{let[e,n]=(0,s.useState)(0);return(0,l.jsxs)(l.Fragment,{children:[(0,l.jsx)(r.ZP,{}),(0,l.jsx)(c.Z,{maxWidth:"md",children:(0,l.jsxs)(o.Z,{elevation:3,sx:{p:3,backgroundColor:"white"},children:[(0,l.jsx)(t.Z,{variant:"h4",component:"h1",gutterBottom:!0,children:"K-Scale Sim"}),(0,l.jsx)(d.Z,{position:"static",children:(0,l.jsx)(h.Z,{value:e,onChange:(e,i)=>{n(i)},"aria-label":"simple tabs example",children:j.map((e,n)=>(0,s.createElement)(x.Z,{label:e.label,id:"simple-tab-".concat(n),"aria-controls":"simple-tabpanel-".concat(n),key:n}))})}),j.map((n,i)=>(0,l.jsx)(m,{value:e,index:i,children:n.content},i))]})})]})}}},function(e){e.O(0,[437,971,23,744],function(){return e(e.s=8562)}),_N_E=e.O()}]);